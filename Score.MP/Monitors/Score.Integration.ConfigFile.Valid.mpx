<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <!--
%%
Description:
  A MONITOR which runs a timed PowerShell script as the DataSource and outputs a propertybag as GOOD or BAD to drive Monitor state and ALERT
  CompanyID - is a short abbreviation for your company with NO SPACES OR SPECIAL CHARACTERS ALLOWED
  AppName - is a short name for your app with NO SPACES OR SPECIAL CHARACTERS ALLOWED  
  ClassID - is the targeted class such as your custom class or Windows!Microsoft.Windows.Server.OperatingSystem
  UniqueID - Is a unique short description of the monitor purpose (NO SPACES OR SPECIAL CHARACTERS ALLOWED) such as "MonitorFilesInFolder"  
  
Version: 1.3
LastModified: 4-Nov-2017
%%

In this fragment you need to replace:
  Microsoft
  Score
  SCORE.IntegrationServer.Class
  ConfigFile.IsValid


This fragment depends on references:
  RequiredReference: Alias="System", ID="System.Library"
  RequiredReference: Alias="Windows", ID="Microsoft.Windows.Library"
  RequiredReference: Alias="Health", ID="System.Health.Library"	
  
@@Author=Kevin Holman@@  
-->
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Microsoft.Score.ConfigFile.IsValid.Monitor.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="0" type="xsd:string" name="ScriptLocation" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Microsoft.Score.ConfigFile.IsValid.Monitor.DataSource.ps1</ScriptName>
                <ScriptBody>
                  #=================================================================================
                  #  Describe Script Here
                  #
                  #  Author:
                  #  v1.0
                  #=================================================================================
                  param($ScriptLocation)

                  # Constants section - modify stuff here:
                  #=================================================================================
                  # Assign script name variable for use in event logging.
                  $ScriptName = "Microsoft.Score.ConfigFile.IsValid.Monitor.DataSource.ps1"
                  $EventID = "3344"
                  #=================================================================================


                  # Starting Script section - All scripts get this
                  #=================================================================================
                  # Gather the start time of the script
                  $StartTime = Get-Date
                  #Set variable to be used in logging events
                  $whoami = whoami
                  # Load MOMScript API
                  $momapi = New-Object -comObject MOM.ScriptAPI
                  # Load PropertyBag function
                  $bag = $momapi.CreatePropertyBag()
                  #Log script event that we are starting task
                  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
                  #=================================================================================


                  # Begin MAIN script section
                  #=================================================================================
                  #Set the condition = bad.  This represents your script finding something wrong
                  $strCondition = "Bad"

                  Set-Location $ScriptLocation
                  If(Test-Path -Path ".\app.monitor.config" -PathType){

                  Try{
                  [xml]$thisConfigFile = Get-Content -Path ".\app.monitor.config"
                  $strCondition = "Good"
                  }
                  Catch{
                  $msg = $_.Exception.Message
                  $bag.AddValue('Error',$msg)
                  }
                  }
                  $msg = "Config file 'app.monitor.config' not found in $ScriptLocation"
                  $bag.AddValue('Error',$msg)


                  #Check the value of $strCondition
                  if ($strCondition -eq "Good")
                  {
                  # $momapi.LogScriptEvent($ScriptName,$EventID,0,"Config File is Valid")
                  $bag.AddValue('Result','ConfigFileIsValid')
                  }
                  else
                  {
                  $momapi.LogScriptEvent($ScriptName,$EventID,0,"Config file is Not Valid")
                  $bag.AddValue('Result','ConfigFileNotValid')
                  }

                  # Return all bags
                  $bag


                  # End of script section
                  #=================================================================================
                  #Log an event for script ending and total execution time.
                  $EndTime = Get-Date
                  $ScriptTime = ($EndTime - $StartTime).TotalSeconds
                  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
                  #=================================================================================
                  # End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="Microsoft.Score.ConfigFile.IsValid.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="ConfigFileIsValid" NoDetection="false" />
          <MonitorTypeState ID="ConfigFileNotValid" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="0" type="xsd:string" name="ScriptLocation" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Microsoft.Score.ConfigFile.IsValid.Monitor.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="ConfigFileIsValidFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">ConfigFileIsValid</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="ConfigFileNotValidFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">ConfigFileNotValid</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="ConfigFileIsValid">
              <Node ID="ConfigFileIsValidFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="ConfigFileNotValid">
              <Node ID="ConfigFileNotValidFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="ConfigFileIsValid">
              <Node ID="ConfigFileIsValidFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="ConfigFileNotValid">
              <Node ID="ConfigFileNotValidFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Monitors>
      <UnitMonitor ID="Microsoft.Score.ConfigFile.IsValid.Monitor" Accessibility="Public" Enabled="true" Target="Microsoft.SCORE.IntegrationServer.Class" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Microsoft.Score.ConfigFile.IsValid.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Score.ConfigFile.IsValid.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <!-- Warning or Error should match OperationalStates below  -->
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <!-- Common options for AlertSeverity are MatchMonitorHealth, Information, Warning, Error -->
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="ConfigFileIsValid" MonitorTypeStateID="ConfigFileIsValid" HealthState="Success" />
          <OperationalState ID="ConfigFileNotValid" MonitorTypeStateID="ConfigFileNotValid" HealthState="Warning" />
          <!-- HealthState = Warning or Error -->
        </OperationalStates>
        <Configuration>
          <ScriptLocation>$Target/Property[Type='Microsoft.SCORE.IntegrationServer.Class']/ScriptLocation$</ScriptLocation>
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime></SyncTime>
          <TimeoutSeconds>120</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
    </Monitors>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Microsoft.Score.ConfigFile.IsValid.Monitor.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Microsoft.Score.ConfigFile.IsValid.Monitor">
          <Name>Microsoft Score ConfigFile.IsValid Monitor</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Score.ConfigFile.IsValid.Monitor" SubElementID="ConfigFileIsValid">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Score.ConfigFile.IsValid.Monitor" SubElementID="ConfigFileNotValid">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Score.ConfigFile.IsValid.Monitor.AlertMessage">
          <Name>Microsoft Score ConfigFile.IsValid Monitor: Failure</Name>
          <Description>Microsoft Score ConfigFile.IsValid Monitor: detected a bad condition</Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPackFragment>
