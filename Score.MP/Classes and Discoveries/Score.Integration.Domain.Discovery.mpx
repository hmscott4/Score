<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Monitoring>
    <Discoveries>
      <Discovery ID="Microsoft.SCORE.IntegrationServer.Domain.Class.Discovery" Enabled="true" Target="Microsoft.SCORE.IntegrationServer.Class" ConfirmDelivery="true" Remotable="true" Priority="Normal">
        <!-- We choose Microsoft.Windows.Server.OperatingSystem as the preferred target class to ensure this will run on all Windows Servers, but wont create duplicates on clusters -->
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Microsoft.SCORE.IntegrationServer.Domain.Class" />
        </DiscoveryTypes>
        <DataSource ID="PSDiscovery" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86403</IntervalSeconds>
          <SyncTime />
          <ScriptName>Microsoft.SCORE.IntegrationServer.Domain.Class.Discovery.ps1</ScriptName>
          <ScriptBody>
            #=================================================================================
            #  Description of Script here
            #=================================================================================
            param($SourceId,$ManagedEntityId,$IntegrationServerName)

            #=================================================================================
            # Constants section - modify stuff here:
            # Change the registry path and search pattern below to match your needs.
            $RegPath = "SOFTWARE\Microsoft\Microsoft Operations Manager\MP\SCORE\MgmtGroups\$Target/ManagementGroup/Name$"
            # Assign script name variable for use in event logging
            $ScriptName = "Microsoft.SCORE.IntegrationServer.Domain.Class.Discovery.ps1"
            $eventID = "3343"
            #=================================================================================

            # Gather script start time
            $StartTime = Get-Date

            # Gather who the script is running as
            $whoami = whoami

            # Load the MOMScript API and discovery propertybag
            $momapi = New-Object -comObject "Mom.ScriptAPI"
            $propertyBag = $momapi.CreateDiscoveryData(0, $sourceId, $managedEntityId)

            #Log script event that we are starting task
            $momapi.LogScriptEvent($ScriptName,$eventID,0, "Starting script.  Running as ($whoami) `n Source: $SourceId `n Managed Entity ID: $ManagedEntityId")

            # Begin Main Script
            #=================================================================================
            #Get matching subkeys
            #The next line uses a "like" operator which can be changed to -eq if you dont want to use a wildcard
            $Keys = Get-ChildItem -Path HKLM:\$RegPath | % { $_.Name.Replace("HKEY_LOCAL_MACHINE\$RegPath\","")}
            IF ($Keys.length -gt 0)
            {
            foreach ($Key in $Keys)
            {
            #Add discovery data to the bag
            $instance = $propertyBag.CreateClassInstance("$MPElement[Name='Microsoft.SCORE.IntegrationServer.Domain.Class']$")
            $instance.AddProperty("$MPElement[Name='Microsoft.SCORE.IntegrationServer.Domain.Class']/Domain$", $Key)
            $instance.AddProperty("$MPElement[Name='Microsoft.SCORE.IntegrationServer.Domain.Class']/IsForest$", "0")
            $instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $Key)
            $propertyBag.AddInstance($instance)

            # $momapi.LogScriptEvent($ScriptName,$eventID,0,"Discovered registry entry for Domain $Key.")
            }
            }
            Else
            {
            # Log an event for no objects discovered
            $momapi.LogScriptEvent($ScriptName,$eventID,0,"Discovery script returned no discovered objects")
            }
            #=================================================================================

            #Output Discovery Propertybag
            $propertyBag

            # Return Discovery Bag to the command line for testing (does not work from ISE):
            # $momapi.Return($propertyBag)

            #Log an event for script ending and total execution time.
            $EndTime = Get-Date
            $ScriptTime = ($EndTime - $StartTime).TotalSeconds
            $momapi.LogScriptEvent($ScriptName,$eventID,0,"Script has completed.  Runtime was ($ScriptTime) seconds.")
          </ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceID</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityID</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
    </Discoveries>
  </Monitoring><LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Microsoft.SCORE.IntegrationServer.Domain.Class">
          <Name>Microsoft Microsoft.SCORE.IntegrationServer.Domain Class</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.SCORE.IntegrationServer.Domain.Class.Discovery">
          <Name>Microsoft SCORE Integration Server Domain Class Discovery</Name>
          <Description>Active Directory Domains that will be monitored by this Integration Server</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.SCORE.IntegrationServer.Domain.Class" SubElementID="Domain">
          <Name>Domain</Name>
          <Description>Active Directory Domain (FQDN)</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.SCORE.IntegrationServer.Domain.Class" SubElementID="IsForest">
          <Name>Is Forest</Name>
          <Description>NOT FUNCTIONAL: Is Forest Root (1 or 0)</Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks></ManagementPackFragment>
